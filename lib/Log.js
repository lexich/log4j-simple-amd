// Generated by CoffeeScript 1.6.3
(function() {
  define([], function() {
    "use strict";
    var ctx;
    ctx = {};
    (function(ctx) {
      var Log, MessageProcesor, execute, instance;
      execute = function(message, level, name) {
        var msg;
        msg = "(" + name + ") - " + message;
        if (level === Log.prototype.LEVEL.INFO) {
          return console.info("INFO: " + msg);
        } else if (level === Log.prototype.LEVEL.WARN) {
          return console.warn("WARN: " + msg);
        } else if (level === Log.prototype.LEVEL.ERROR) {
          return console.error("ERROR: " + msg);
        } else {
          if (level === Log.prototype.LEVEL.DEBUG) {
            return console.debug("DEBUG: " + msg);
          }
        }
      };
      instance = void 0;
      Log = (function() {
        Log.prototype.LEVEL = {
          INFO: 1 << 0,
          DEBUG: 1 << 1,
          WARN: 1 << 2,
          ERROR: 1 << 3
        };

        Log.prototype._initConfig = false;

        function Log() {
          if (instance === void 0) {
            instance = this;
            this.options = {};
          }
          return instance;
        }

        /*
        @param options
        name -
        level - {value} default LOG.LEVEL.ERROR
        */


        Log.prototype.initConfig = function(options, _execute) {
          var current, key, param, _results;
          this._execute = _execute != null ? _execute : execute;
          this._initConfig = true;
          _results = [];
          for (key in options) {
            this.options[key] = this.options[key] || {};
            current = this.options[key];
            param = options[key];
            if (param.level) {
              current.level = param.level;
              if (current.logger) {
                _results.push(current.logger.setLevel(param.level));
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };

        Log.prototype.getLogger = function(name) {
          var getLevel, mprocessor,
            _this = this;
          getLevel = function() {
            var def, level, option;
            _this.options[name] = _this.options[name] || {};
            option = _this.options[name];
            def = _this.LEVEL.ERROR | _this.LEVEL.WARN;
            return level = (option ? option.level || def : def);
          };
          mprocessor = new MessageProcesor(name, getLevel, (function() {
            return _this._initConfig;
          }), (function() {
            return _this._execute;
          }));
          mprocessor.prototype = {};
          mprocessor.constructor = function() {};
          return mprocessor;
        };

        return Log;

      })();
      MessageProcesor = (function() {
        MessageProcesor.prototype._firstMsg = false;

        function MessageProcesor(name, _level, initialized, _execute) {
          this.name = name;
          this._level = _level;
          this.initialized = initialized != null ? initialized : (function() {
            return true;
          });
          this._execute = _execute != null ? _execute : (function() {
            return execute;
          });
          if (this.initialized()) {
            this.setLevel(this._level());
          }
        }

        MessageProcesor.prototype.msg = function(msg, level) {
          var isLevel;
          if (this._firstMsg === false && this.initialized()) {
            this.setLevel(this._level());
          }
          this._firstMsg = true;
          isLevel = this.level & level;
          if (isLevel !== 0) {
            return this.execute(msg, level, this.name);
          }
        };

        MessageProcesor.prototype.setLevel = function(level) {
          this.level = level;
          return this.execute = this._execute();
        };

        MessageProcesor.prototype.info = function(msg) {
          return this.msg(msg, Log.prototype.LEVEL.INFO);
        };

        MessageProcesor.prototype.debug = function(msg) {
          return this.msg(msg, Log.prototype.LEVEL.DEBUG);
        };

        MessageProcesor.prototype.warn = function(msg) {
          return this.msg(msg, Log.prototype.LEVEL.WARN);
        };

        MessageProcesor.prototype.error = function(msg) {
          return this.msg(msg, Log.prototype.LEVEL.ERROR);
        };

        return MessageProcesor;

      })();
      return ctx.Log = new Log();
    })(ctx);
    return ctx.Log;
  });

}).call(this);
