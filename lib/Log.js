// Generated by CoffeeScript 1.6.3
(function() {
  define([], function() {
    "use strict";
    var ctx;
    ctx = {};
    (function(ctx) {
      var DEBUG, ERROR, INFO, Log, MessageProcesor, WARN, instance;
      ({
        execute: function(message, level, name) {
          var msg;
          msg = "(" + name + ") - " + message;
          if (level === Log.prototype.LEVEL.INFO) {
            return console.info("INFO: " + msg);
          } else if (level === Log.prototype.LEVEL.WARN) {
            return console.warn("WARN: " + msg);
          } else if (level === Log.prototype.LEVEL.ERROR) {
            return console.error("ERROR: " + msg);
          } else {
            if (level === Log.prototype.LEVEL.DEBUG) {
              return console.debug("DEBUG: " + msg);
            }
          }
        }
      });
      MessageProcesor = function(name, _level, initialized, _execute) {
        this.name = name;
        this._level = _level;
        this.initialized = initialized != null ? initialized : (function() {
          return true;
        });
        this._execute = _execute != null ? _execute : (function() {
          return execute;
        });
        if (this.initialized()) {
          this.setLevel(this._level());
        }
        return this;
      };
      Log = function() {
        var instance;
        if (instance === void 0) {
          instance = this;
          this.options = {};
        }
        return instance;
      };
      instance = void 0;
      ERROR = 1 << 3;
      WARN = 1 << 2;
      DEBUG = 1 << 1;
      INFO = 1 << 0;
      Log.prototype = {
        constructor: Log,
        LEVEL: {
          INFO: INFO,
          DEBUG: DEBUG,
          WARN: WARN,
          ERROR: ERROR
        },
        _initConfig: false,
        /*
        @param options
        name -
        level - {value} default LOG.LEVEL.ERROR
        */

        initConfig: function(options, execute) {
          var current, key, param, _results;
          this.execute = execute != null ? execute : execute;
          this._initConfig = true;
          _results = [];
          for (key in options) {
            this.options[key] = this.options[key] || {};
            current = this.options[key];
            param = options[key];
            if (param.level) {
              current.level = param.level;
              if (current.logger) {
                _results.push(current.logger.setLevel(param.level));
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        },
        getLogger: function(name) {
          var getLevel, logger,
            _this = this;
          getLevel = function() {
            var def, level, option;
            _this.options[name] = _this.options[name] || {};
            option = _this.options[name];
            def = _this.LEVEL.ERROR | _this.LEVEL.WARN;
            return level = (option ? option.level || def : def);
          };
          logger = new MessageProcesor(name, getLevel, (function() {
            return _this._initConfig;
          }), (function() {
            return _this.execute;
          }));
          logger.prototype = {};
          logger.constructor = function() {};
          return logger;
        }
      };
      MessageProcesor.prototype = {
        constructor: MessageProcesor,
        _firstMsg: false,
        msg: function(msg, level) {
          var is_;
          if (this._firstMsg === false && this.initialized()) {
            this.setLevel(this._level());
          }
          this._firstMsg = true;
          is_ = this.level & level;
          if (is_ !== 0) {
            return this.execute(msg, level, this.name);
          }
        },
        setLevel: function(level) {
          this.level = level;
          return this.execute = this._execute();
        },
        info: function(msg) {
          return this.msg(msg, Log.prototype.LEVEL.INFO);
        },
        debug: function(msg) {
          return this.msg(msg, Log.prototype.LEVEL.DEBUG);
        },
        warn: function(msg) {
          return this.msg(msg, Log.prototype.LEVEL.WARN);
        },
        error: function(msg) {
          return this.msg(msg, Log.prototype.LEVEL.ERROR);
        }
      };
      return ctx.Log = new Log();
    })(ctx);
    return ctx.Log;
  });

}).call(this);
